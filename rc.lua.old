-- Performance optimization: use local variables
local gears = require("gears")
local awful = require("awful")
local wibox = require("wibox")
local beautiful = require("beautiful")
local naughty = require("naughty")
local hotkeys_popup = require("awful.hotkeys_popup")
require("awful.autofocus")
require("awful.hotkeys_popup.keys")

-- Error handling
do
    local in_error = false
    awesome.connect_signal("debug::error", function(err)
        if in_error then return end
        in_error = true
        naughty.notify({
            preset = naughty.config.presets.critical,
            title = "Error occurred",
            text = tostring(err)
        })
        in_error = false
    end)
end

-- Variable definitions
local modkey = "Mod4"
local altkey = "Mod1"
local terminal = "kitty"
local editor = os.getenv("EDITOR") or "nvim"
local browser = "brave-browser"

awful.layout.layouts = {
    awful.layout.suit.tile,
    awful.layout.suit.max,
}

awful.util.terminal = terminal
awful.util.tagnames = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "0" }

beautiful.init(string.format("%s/.config/awesome/themes/blarvis/theme.lua", os.getenv("HOME")))

-- Screen setup
awful.screen.connect_for_each_screen(function(s)
    beautiful.at_screen_connect(s)
end)

-- Key bindings
local globalkeys = gears.table.join(
    awful.key({ "Control" }, "space", naughty.destroy_all_notifications, 
              {description = "destroy all notifications", group = "hotkeys"}),
    awful.key({ "Shift" }, "Print", function() awful.spawn("xfce4-screenshooter -r") end,
              {description = "take a selection screenshot", group = "hotkeys"}),
    awful.key({}, "Print", function() awful.spawn("xfce4-screenshooter") end,
              {description = "take a screenshot", group = "hotkeys"}),
    awful.key({ altkey, "Shift" }, "l", function() 
        awful.spawn("env XSECURELOCK_SAVER=saver_xscreensaver xsecurelock") 
    end, {description = "lock screen", group = "hotkeys"}),

    -- Tag browsing
    awful.key({ modkey }, "Left", awful.tag.viewprev, {description = "view previous", group = "tag"}),
    awful.key({ modkey }, "Right", awful.tag.viewnext, {description = "view next", group = "tag"}),
    awful.key({ modkey }, "Escape", awful.tag.history.restore, {description = "go back", group = "tag"}),

    -- Client focus
    awful.key({ altkey }, "j", function() awful.client.focus.byidx(1) end,
              {description = "focus next by index", group = "client"}),
    awful.key({ altkey }, "k", function() awful.client.focus.byidx(-1) end,
              {description = "focus previous by index", group = "client"}),

    -- Layout manipulation
    awful.key({ modkey, "Shift" }, "j", function() awful.client.swap.byidx(1) end,
              {description = "swap with next client by index", group = "client"}),
    awful.key({ modkey, "Shift" }, "k", function() awful.client.swap.byidx(-1) end,
              {description = "swap with previous client by index", group = "client"}),
    awful.key({ modkey }, "u", awful.client.urgent.jumpto,
              {description = "jump to urgent client", group = "client"}),

    -- Standard programs
    awful.key({ modkey }, "Return", function() awful.spawn(terminal) end,
              {description = "open a terminal", group = "launcher"}),
    awful.key({ modkey, "Control" }, "r", awesome.restart,
              {description = "reload awesome", group = "awesome"}),
    awful.key({ modkey, "Shift" }, "q", awesome.quit,
              {description = "quit awesome", group = "awesome"}),

    -- Prompt
    awful.key({ modkey }, "r", function() awful.screen.focused().mypromptbox:run() end,
              {description = "run prompt", group = "launcher"}),

    -- Brightness control
    awful.key({}, "XF86MonBrightnessUp", function() awful.spawn("brightnessctl set +5%") end,
              {description = "increase brightness", group = "hotkeys"}),
    awful.key({}, "XF86MonBrightnessDown", function() awful.spawn("brightnessctl set 5%-") end,
              {description = "decrease brightness", group = "hotkeys"}),

    -- Volume control
    awful.key({}, "XF86AudioRaiseVolume", function()
        awful.spawn.with_shell("amixer -q set Master 1%+")
        beautiful.volume.update()
    end, {description = "volume up", group = "hotkeys"}),
    awful.key({}, "XF86AudioLowerVolume", function()
        awful.spawn.with_shell("amixer -q set Master 1%-")
        beautiful.volume.update()
    end, {description = "volume down", group = "hotkeys"}),
    awful.key({}, "XF86AudioMute", function()
        awful.spawn.with_shell("amixer -q set Master toggle")
        beautiful.volume.update()
    end, {description = "toggle mute", group = "hotkeys"})
)

-- Client keys
local clientkeys = gears.table.join(
    awful.key({ modkey }, "f", function(c)
        c.fullscreen = not c.fullscreen
        c:raise()
    end, {description = "toggle fullscreen", group = "client"}),
    awful.key({ modkey, "Shift" }, "c", function(c) c:kill() end,
              {description = "close", group = "client"}),
    awful.key({ modkey, "Control" }, "space", awful.client.floating.toggle,
              {description = "toggle floating", group = "client"}),
    awful.key({ modkey }, "t", function(c) c.ontop = not c.ontop end,
              {description = "toggle keep on top", group = "client"}),
    awful.key({ modkey }, "n", function(c) c.minimized = true end,
              {description = "minimize", group = "client"}),
    awful.key({ modkey }, "m", function(c)
        c.maximized = not c.maximized
        c:raise()
    end, {description = "(un)maximize", group = "client"})
)

-- Bind all key numbers to tags
for i = 1, 9 do
    globalkeys = gears.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9, function()
            local screen = awful.screen.focused()
            local tag = screen.tags[i]
            if tag then tag:view_only() end
        end, {description = "view tag #"..i, group = "tag"}),
        awful.key({ modkey, "Shift" }, "#" .. i + 9, function()
            if client.focus then
                local tag = client.focus.screen.tags[i]
                if tag then client.focus:move_to_tag(tag) end
            end
        end, {description = "move focused client to tag #"..i, group = "tag"})
    )
end

-- Set keys
root.keys(globalkeys)

-- Rules
awful.rules.rules = {
    {
        rule = {},
        properties = {
            border_width = beautiful.border_width,
            border_color = beautiful.border_normal,
            focus = awful.client.focus.filter,
            raise = true,
            keys = clientkeys,
            buttons = clientbuttons,
            screen = awful.screen.preferred,
            placement = awful.placement.no_overlap + awful.placement.no_offscreen,
            size_hints_honor = false,
        }
    },
    {
        rule_any = {
            instance = {"DTA", "copyq", "pinentry"},
            class = {"Arandr", "Blueman-manager", "Gpick", "Kruler", "MessageWin", "Sxiv", "Tor Browser", "Wpa_gui", "veromix", "xtightvncviewer"},
            name = {"Event Tester"},
            role = {"AlarmWindow", "ConfigManager", "pop-up"}
        },
        properties = {floating = true}
    }
}

-- Signals
client.connect_signal("manage", function(c)
    if awesome.startup and not c.size_hints.user_position and not c.size_hints.program_position then
        awful.placement.no_offscreen(c)
    end
    c.shape = function(cr, w, h)
        gears.shape.rounded_rect(cr, w, h, 25)
    end
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)

-- Switch to parent after closing child window
local function focus_parent()
    local c = awful.client.focus.history.get(awful.screen.focused(), 0)
    if c then client.focus = c; c:raise() end
end

client.connect_signal("property::minimized", focus_parent)
client.connect_signal("unmanage", focus_parent)
tag.connect_signal("property::selected", focus_parent)
